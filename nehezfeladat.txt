using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _20241121
{
	class Versenyzo
	{
		public int helyezes, eredmeny;
		public string neve, iskola, telepules, szakmacsoport;

		public Versenyzo(string egysor)
		{
			string[] darabok = egysor.Trim().Split('\t');
			helyezes = Convert.ToInt32(darabok[0]);
			neve = darabok[1];
			iskola = darabok[2];
			telepules = darabok[3];
			eredmeny = Convert.ToInt32(darabok[4]);
			szakmacsoport = darabok[5];
		}
	}
	class Program
	{
		static List<Versenyzo> versenyzok = new List<Versenyzo>();
		static void Main(string[] args)
		{
			f1();
			f2();
			f3();
			f5();
			f6();
			Console.WriteLine("Nyomj entert: ");
			Console.ReadLine();
		}
		static void f1()
		{
			string[] beolvas = File.ReadAllLines("eredmenyek.txt", Encoding.Default);
			foreach (var item in beolvas)
			{
				versenyzok.Add(new Versenyzo(item));
			}
		}
		static void f2()
		{
			Console.WriteLine($"2. Feladat: {versenyzok.Count}");
		}
		static void f3()
		{
			Dictionary<string, int> versenyekstatisztika = new Dictionary<string, int>();
			foreach (var item in versenyzok)
			{
				if (versenyekstatisztika.ContainsKey(item.szakmacsoport))
				{
					versenyekstatisztika[item.szakmacsoport]++;
					
				}
				else
				{
					versenyekstatisztika[item.szakmacsoport] = 1;
				}
			}
			Console.WriteLine("3 Feladat: Szakmacsoportok és tanulóik száma");
			foreach (var item in versenyekstatisztika)
			{
				Console.WriteLine($" {item.Key} : {item.Value}");
			}
		}
		static void f4()
		{
			//file írás
		}
		static void f5()
		{
			Console.WriteLine("5. Feladat: Ábrahám keresztnevű diákok adatai");
			foreach (var item in versenyzok)
			{
				if (item.neve.Split()[1] == "Ábrahám")
				{
					Console.WriteLine($"{item.helyezes} {item.neve} {item.iskola} {item.telepules} {item.eredmeny} {item.szakmacsoport} ");
				}

			}
		}
		static int maximumkivalasztas(List<Object> lista)
		{
			int maxi = 0;
			foreach (var item in lista)
			{
				if (Convert.ToInt32(item) > maxi)
				{
					maxi = Convert.ToInt32(item);
				}
			}
			return maxi;
		}
		static void f6()
		{
			Console.WriteLine("6. Feladat");
			Dictionary<string, List<Object>> dobogosok = new Dictionary<string, List<object>>();
			dobogosok.Add("gépészjegyek", new List<object>());
			dobogosok.Add("gépésznevek", new List<object>());
			dobogosok.Add("informatikajegyek", new List<object>());
			dobogosok.Add("informatikanevek", new List<object>());
			dobogosok.Add("környezetvédelemjegyek", new List<object>());
			dobogosok.Add("környezetvédelemnevek", new List<object>());

			foreach (var item in versenyzok)
			{
				if (item.szakmacsoport == "gépész")
				{
					dobogosok["gépésznevek"].Add(item.neve);
					dobogosok["gépészjegyek"].Add(item.helyezes);
				}
				if (item.szakmacsoport == "informatika")
				{
					dobogosok["informatikanevek"].Add(item.neve);
					dobogosok["informatikajegyek"].Add(item.helyezes);
				}
				if (item.szakmacsoport == "környezetvédelem")
				{
					dobogosok["környezetvédelemnevek"].Add(item.neve);
					dobogosok["környezetvédelemjegyek"].Add(item.helyezes);
				}
			}
			foreach (var item in versenyzok)
			{
				if (item.szakmacsoport == "gépész")
				{
					dobogosok["gépészjegyek"].Add(item.helyezes);
					dobogosok["gépésznevek"].Add(item.neve);
				}
				if (item.szakmacsoport == "informatika")
				{
					dobogosok["gépészjegyek"].Add(item.helyezes);
					dobogosok["gépésznevek"].Add(item.neve);
				}
				if (item.szakmacsoport == "környezetvédelem")
				{
					dobogosok["gépészjegyek"].Add(item.helyezes);
					dobogosok["gépésznevek"].Add(item.neve);
				}
			}

			int gépészjegyekmaxi = dobogosok["gépészjegyek"].IndexOf(maximumkivalasztas(dobogosok["gépészjegyek"]));
			dobogosok["gépészjegyek"].Remove(dobogosok["gépészjegyek"][gépészjegyekmaxi]);
			dobogosok["gépésznevek"].Remove(dobogosok["gépészjegyek"][gépészjegyekmaxi]);

			int informatikajegyekmaxi = dobogosok["informatikajegyek"].IndexOf(maximumkivalasztas(dobogosok["informatikajegyek"]));
			dobogosok["informatikajegyek"].Remove(dobogosok["informatikajegyek"][informatikajegyekmaxi]);
			dobogosok["informatikanevek"].Remove(dobogosok["informatikanevek"][informatikajegyekmaxi]);


			int környezetvédelemjegyekmaxi = dobogosok["környezetvédelemjegyek"].IndexOf(maximumkivalasztas(dobogosok["környezetvédelemjegyek"]));
			dobogosok["környezetvédelemjegyek"].Remove(dobogosok["környezetvédelemjegyek"][környezetvédelemjegyekmaxi]);
			dobogosok["környezetvédelemnevek"].Remove(dobogosok["környezetvédelemnevek"][környezetvédelemjegyekmaxi]);

			int gépészjegydobogos = dobogosok["gépészjegyek"].IndexOf(maximumkivalasztas(dobogosok["gépészjegyek"]));







		}
	}
}
